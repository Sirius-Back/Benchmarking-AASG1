# -*- coding: utf-8 -*-
"""plots_final_AASG1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DA22pfQGIvezSwRY3d1tX-ViKK9CwXvx
"""

import pandas as pd

data = [
    ("Elapsed Real Time (secs)", [801.60, 704.47, 706.87]),
    ("CPU-seconds (user mode)", [42651.19, 42157.43, 41607.39]),
    ("CPU-seconds (kernel mode)", [2436.54, 1886.11, 2137.53]),
    ("CPU Percentage", [5624, 6251, 6188]),
    ("Max Resident Set Size (Kb)", [128920888, 115878888, 115825396]),
    ("Number of filesystem outputs", [632871608, 632722720, 632722752]),
]

# Convert to DataFrame
df = pd.DataFrame([(metric, val) for metric, values in data for val in values],
                  columns=["Metric", "Value"])

df['replicate'] = df.groupby('Metric').cumcount()+1
transposed_df = df.pivot(
    index='replicate',
    columns='Metric',
    values='Value'
).reset_index()

transposed_df.head()
transposed_df.columns.name = None

transposed_df = transposed_df[[
    'replicate',
    'Elapsed Real Time (secs)',
    'CPU-seconds (user mode)',
    'CPU-seconds (kernel mode)',
    'CPU Percentage',
    'Max Resident Set Size (Kb)',
    'Number of filesystem outputs'
]]

transposed_df.index = transposed_df['replicate']

transposed_df.drop('replicate', axis=1, inplace=True)

transposed_df

import matplotlib.pyplot as plt
#!pip install seaborn
import seaborn as sns

plt.figure(figsize=(12, 6))

sns.boxplot(y=transposed_df['CPU Percentage'], color='skyblue', width=0.3)
sns.stripplot(y=transposed_df['CPU Percentage'], color='black', size=8, jitter=False)

plt.xticks(rotation=45, ha="right")
plt.title("Performance Metrics with Replicates")
plt.tight_layout()
plt.show()

transposed_df.columns

# 4 subplots in one row
fig, ax = plt.subplots(2, 3, figsize=(10, 6))

# Flatten the 2D array of subplots into a 1D array for easier indexing
ax = ax.flatten()

for i, col in enumerate(transposed_df.columns):
  transposed_df.boxplot(col, ax=ax[i])
  ax[i].set_xticklabels([])
  ax[i].set_title(col)

fig.suptitle('aas-match Performance on HG004', fontsize=16)
plt.subplots_adjust(wspace=0.5, hspace=0.5)
plt.show()

# vcal performance

data_v = [
    ("Elapsed Real Time (secs)", [130.07, 124.52, 120.32]),
    ("CPU-seconds (user mode)", [4014.67, 4005.90, 3975.81]),
    ("CPU-seconds (kernel mode)", [1014.35, 865.21, 699.32]),
    ("CPU Percentage", [3866, 3911, 3885]),
    ("Max Resident Set Size (Kb)", [4665468, 4673404, 4675228]),
    ("Number of filesystem outputs", [971336, 971336, 971432]),
]


# Convert to DataFrame
df_v = pd.DataFrame([(metric, val) for metric, values in data_v for val in values],
                  columns=["Metric", "Value"])

df_v['replicate'] = df_v.groupby('Metric').cumcount()+1
transposed_df_v = df_v.pivot(
    index='replicate',
    columns='Metric',
    values='Value'
).reset_index()

transposed_df_v.head()
transposed_df_v.columns.name = None

transposed_df_v

transposed_df_v = transposed_df_v[[
    'replicate',
    'Elapsed Real Time (secs)',
    'CPU-seconds (user mode)',
    'CPU-seconds (kernel mode)',
    'CPU Percentage',
    'Max Resident Set Size (Kb)',
    'Number of filesystem outputs'
]]

transposed_df_v.index = transposed_df_v['replicate']
transposed_df_v.drop('replicate', axis=1, inplace=True)

# 4 subplots in one row
fig, ax = plt.subplots(2, 3, figsize=(10, 6))

# Flatten the 2D array of subplots into a 1D array for easier indexing
ax = ax.flatten()

for i, col in enumerate(transposed_df_v.columns):
  transposed_df_v.boxplot(col, ax=ax[i])
  ax[i].set_xticklabels([])
  ax[i].set_title(col)

fig.suptitle('aas-vcall Performance on HG004', fontsize=16)
plt.subplots_adjust(wspace=0.5, hspace=0.5)
plt.show()



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind  # For p-value calculation

# Sample data for alignment performance metrics
data = {
    'BWA-GATK': {
        'Elapsed Real Time (secs)': (2265.42, 2318.15, 2345.07),
        'CPU-seconds(user mode)': (180591.95, 187730.83, 182823.65),
        'CPU-seconds(kernel mode)': (769.89, 873.85, 776.64),
        'CPU Percentage': (8005, 8135, 7829),
        'Max Resident Set Size (Kb)': (55927088, 56329120, 55843536),
        'Number of filesystem outputs': (1144, 1120, 1192)
    },
    'AASG1': {
        'Elapsed Real Time (secs)': (487.42, 486.63, 487.26),
        'CPU-seconds(user mode)': (51504.04, 50207.96, 49360.83),
        'CPU-seconds(kernel mode)': (2618.52, 2314.67, 2852.20),
        'CPU Percentage': (11103, 10793, 10715),
        'Max Resident Set Size (Kb)': (140029024, 140020268, 140033728),
        'Number of filesystem outputs': (632439408, 632439528, 632439408)
    }
}

# Convert to DataFrame
dfs = []
for sample_name, sample_data in data.items():
    for metric, values in sample_data.items():
        for run, value in enumerate(values, 1):
            dfs.append({
                'Sample': sample_name,
                'Metric': metric,
                'Run': run,
                'Value': value
            })

df = pd.DataFrame(dfs)


# Set up the figure
plt.figure(figsize=(18, 12))
# Add this before creating your plots
plt.rcParams.update({
    'font.size': 12,           # Default font size
    'axes.titlesize': 14,      # Subplot title size
    'axes.labelsize': 12,      # Axis label size
    'xtick.labelsize': 11,     # X-axis tick label size
    'ytick.labelsize': 11,     # Y-axis tick label size
    'legend.fontsize': 12,     # Legend font size
    'figure.titlesize': 16     # Figure title size (suptitle)
})
sns.set_style("whitegrid")
palette = {"BWA-GATK": "#1f77b4", "AASG1": "#ff7f0e"}

# Get metrics in desired order
metrics = [
    'Elapsed Real Time (secs)',
    'CPU-seconds(user mode)',
    'CPU-seconds(kernel mode)',
    'CPU Percentage',
    'Max Resident Set Size (Kb)',
    'Number of filesystem outputs'
]

# Create 2x3 grid
fig, axes = plt.subplots(2, 3, figsize=(18, 12))

# Flatten axes array for easy iteration
axes = axes.flatten()

# Plot each metric in its own subplot
for ax, metric in zip(axes, metrics):
    metric_df = df[df['Metric'] == metric]

    # Boxplot
    sns.boxplot(
        x='Sample',
        y='Value',
        data=metric_df,
        ax=ax,
        palette=palette,
        width=0.6,
        showfliers=False
    )

    # Individual points
    sns.stripplot(
        x='Sample',
        y='Value',
        data=metric_df,
        ax=ax,
        palette=palette,
        size=8,
        alpha=0.7,
        edgecolor='gray',
        linewidth=1,
        jitter=0.1
    )

    # Calculate and display p-value
    sample_a = metric_df[metric_df['Sample'] == 'BWA-GATK']['Value']
    sample_b = metric_df[metric_df['Sample'] == 'AASG1']['Value']
    _, p_value = ttest_ind(sample_a, sample_b)
    p_text = f'p={p_value:.3f}' if p_value >= 0.001 else 'p<0.001'

    # Add mean values
    for i, sample in enumerate(['BWA-GATK', 'AASG1']):
        mean_val = metric_df[metric_df['Sample'] == sample]['Value'].mean()
        ax.scatter(i, mean_val, color='black', marker='_', s=200, linewidth=2)
        ax.text(i, mean_val, f' {mean_val:.1f}',
                verticalalignment='center', fontsize=9)

    # Customize subplot
    ax.set_title(metric, pad=10, fontsize=12)
    ax.set_xlabel('')
    ax.text(0.5, 0.95, p_text, transform=ax.transAxes,
            ha='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.8))

    # Simplify y-axis label if metric has units in parentheses
    if '(' in metric:
        ax.set_ylabel(metric.split('(')[0].strip())
    else:
        ax.set_ylabel(metric)

# Adjust layout
plt.tight_layout(pad=3.0)
plt.suptitle('Alignment Performance Metrics - HG004: BWA-GATK vs AASG1', y=1.02, fontsize=18, fontweight='bold')
plt.show();

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind  # For p-value calculation

# Sample data for variant calling performance metrics
data = {
    'BWA-GATK': {
        'Elapsed Real Time (secs)': (3345.40, 3254.75, 3305.85),
        'CPU-seconds(user mode)': (3356.53, 3278.07, 3328.80),
        'CPU-seconds(kernel mode)': (18.17, 6.29, 5.91),
        'CPU Percentage': (100, 100, 100),
        'Max Resident Set Size (Kb)': (14008064, 10799508, 5521352),
        'Number of filesystem outputs': (262304, 262336, 262984)
    },
    'AASG1': {
        'Elapsed Real Time (secs)': (94.50, 86.13, 94.61),
        'CPU-seconds(user mode)': (4157.82, 4121.93, 4159.77),
        'CPU-seconds(kernel mode)': (2770.36, 2015.19, 2995.94),
        'CPU Percentage': (7330, 7125, 7563),
        'Max Resident Set Size (Kb)': (4667108, 4662388, 4668104),
        'Number of filesystem outputs': (970896, 970992, 971368)
    }
}

# Convert to DataFrame
dfs = []
for sample_name, sample_data in data.items():
    for metric, values in sample_data.items():
        for run, value in enumerate(values, 1):
            dfs.append({
                'Sample': sample_name,
                'Metric': metric,
                'Run': run,
                'Value': value
            })

df = pd.DataFrame(dfs)


# Set up the figure
plt.figure(figsize=(18, 12))
# Add this before creating your plots
plt.rcParams.update({
    'font.size': 12,           # Default font size
    'axes.titlesize': 14,      # Subplot title size
    'axes.labelsize': 12,      # Axis label size
    'xtick.labelsize': 11,     # X-axis tick label size
    'ytick.labelsize': 11,     # Y-axis tick label size
    'legend.fontsize': 12,     # Legend font size
    'figure.titlesize': 16     # Figure title size (suptitle)
})
sns.set_style("whitegrid")
palette = {"BWA-GATK": "#1f77b4", "AASG1": "#ff7f0e"}

# Get metrics in desired order
metrics = [
    'Elapsed Real Time (secs)',
    'CPU-seconds(user mode)',
    'CPU-seconds(kernel mode)',
    'CPU Percentage',
    'Max Resident Set Size (Kb)',
    'Number of filesystem outputs'
]

# Create 2x3 grid
fig, axes = plt.subplots(2, 3, figsize=(18, 12))

# Flatten axes array for easy iteration
axes = axes.flatten()

# Plot each metric in its own subplot
for ax, metric in zip(axes, metrics):
    metric_df = df[df['Metric'] == metric]

    # Boxplot
    sns.boxplot(
        x='Sample',
        y='Value',
        data=metric_df,
        ax=ax,
        palette=palette,
        width=0.6,
        showfliers=False
    )

    # Individual points
    sns.stripplot(
        x='Sample',
        y='Value',
        data=metric_df,
        ax=ax,
        palette=palette,
        size=8,
        alpha=0.7,
        edgecolor='gray',
        linewidth=1,
        jitter=0.1
    )

    # Calculate and display p-value
    sample_a = metric_df[metric_df['Sample'] == 'BWA-GATK']['Value']
    sample_b = metric_df[metric_df['Sample'] == 'AASG1']['Value']
    _, p_value = ttest_ind(sample_a, sample_b)
    p_text = f'p={p_value:.3f}' if p_value >= 0.001 else 'p<0.001'

    # Add mean values
    for i, sample in enumerate(['BWA-GATK', 'AASG1']):
        mean_val = metric_df[metric_df['Sample'] == sample]['Value'].mean()
        ax.scatter(i, mean_val, color='black', marker='_', s=200, linewidth=2)
        ax.text(i, mean_val, f' {mean_val:.1f}',
                verticalalignment='center', fontsize=9)

    # Customize subplot
    ax.set_title(metric, pad=10, fontsize=12)
    ax.set_xlabel('')
    ax.text(0.5, 0.95, p_text, transform=ax.transAxes,
            ha='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.8))

    # Simplify y-axis label if metric has units in parentheses
    if '(' in metric:
        ax.set_ylabel(metric.split('(')[0].strip())
    else:
        ax.set_ylabel(metric)

# Adjust layout
plt.tight_layout(pad=3.0)
plt.suptitle('Variant Calling Performance Metrics - HG004: BWA-GATK vs AASG1', y=1.02, fontsize=18, fontweight='bold')
plt.show();

protein_sequences = [
'MK',
'M',
'MSG',
'MST'
]
i=0
j=0
maxl=0
ll =[]
ps=[]
for i in range(len(protein_sequences)):
  s = set(protein_sequences[i])
  l = len(s)
  if l >= maxl:
    maxl = l
    ps.append(protein_sequences[i])
print(ps)

dna_sequence = 'ATGACGTCGAAATGCGTAATGCTAGGACCCCTAGATG'
codons_index = []
atg = "ATG"

for i in range(len(dna_sequence) - 2):
        if dna_sequence[i:i+3] == atg:
            codons_index.append(i)
print(codons_index)